// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: user.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserScore int32 `protobuf:"varint,2,opt,name=user_score,json=userScore,proto3" json:"user_score,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetUserScore() int32 {
	if x != nil {
		return x.UserScore
	}
	return 0
}

type StreamUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *StreamUserRequest) Reset() {
	*x = StreamUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUserRequest) ProtoMessage() {}

func (x *StreamUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUserRequest.ProtoReflect.Descriptor instead.
func (*StreamUserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *StreamUserRequest) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type StreamUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *StreamUserResponse) Reset() {
	*x = StreamUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUserResponse) ProtoMessage() {}

func (x *StreamUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUserResponse.ProtoReflect.Descriptor instead.
func (*StreamUserResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *StreamUserResponse) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x32, 0xd7, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4e, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x54, 0x57, 0x46, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_user_proto_goTypes = []interface{}{
	(*UserInfo)(nil),           // 0: proto.UserInfo
	(*StreamUserRequest)(nil),  // 1: proto.StreamUserRequest
	(*StreamUserResponse)(nil), // 2: proto.StreamUserResponse
}
var file_user_proto_depIdxs = []int32{
	0, // 0: proto.StreamUserRequest.users:type_name -> proto.UserInfo
	0, // 1: proto.StreamUserResponse.users:type_name -> proto.UserInfo
	1, // 2: proto.StreamGetUsersService.GetUserScore:input_type -> proto.StreamUserRequest
	1, // 3: proto.StreamGetUsersService.GetUsersScoreByServer:input_type -> proto.StreamUserRequest
	1, // 4: proto.StreamGetUsersService.GetUserScoreByClientStream:input_type -> proto.StreamUserRequest
	1, // 5: proto.StreamGetUsersService.GetUserScoreByTWF:input_type -> proto.StreamUserRequest
	2, // 6: proto.StreamGetUsersService.GetUserScore:output_type -> proto.StreamUserResponse
	2, // 7: proto.StreamGetUsersService.GetUsersScoreByServer:output_type -> proto.StreamUserResponse
	2, // 8: proto.StreamGetUsersService.GetUserScoreByClientStream:output_type -> proto.StreamUserResponse
	2, // 9: proto.StreamGetUsersService.GetUserScoreByTWF:output_type -> proto.StreamUserResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamGetUsersServiceClient is the client API for StreamGetUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamGetUsersServiceClient interface {
	// 普通模式
	GetUserScore(ctx context.Context, in *StreamUserRequest, opts ...grpc.CallOption) (*StreamUserResponse, error)
	// 返回值中使用 stream, 表示是服务端流模式
	GetUsersScoreByServer(ctx context.Context, in *StreamUserRequest, opts ...grpc.CallOption) (StreamGetUsersService_GetUsersScoreByServerClient, error)
	// 请求参数中使用 stream, 表示是客户端流模式
	GetUserScoreByClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamGetUsersService_GetUserScoreByClientStreamClient, error)
	// 请求参数和返回值中都使用 stream, 表示是双向流
	GetUserScoreByTWF(ctx context.Context, opts ...grpc.CallOption) (StreamGetUsersService_GetUserScoreByTWFClient, error)
}

type streamGetUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGetUsersServiceClient(cc grpc.ClientConnInterface) StreamGetUsersServiceClient {
	return &streamGetUsersServiceClient{cc}
}

func (c *streamGetUsersServiceClient) GetUserScore(ctx context.Context, in *StreamUserRequest, opts ...grpc.CallOption) (*StreamUserResponse, error) {
	out := new(StreamUserResponse)
	err := c.cc.Invoke(ctx, "/proto.StreamGetUsersService/GetUserScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGetUsersServiceClient) GetUsersScoreByServer(ctx context.Context, in *StreamUserRequest, opts ...grpc.CallOption) (StreamGetUsersService_GetUsersScoreByServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamGetUsersService_serviceDesc.Streams[0], "/proto.StreamGetUsersService/GetUsersScoreByServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGetUsersServiceGetUsersScoreByServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamGetUsersService_GetUsersScoreByServerClient interface {
	Recv() (*StreamUserResponse, error)
	grpc.ClientStream
}

type streamGetUsersServiceGetUsersScoreByServerClient struct {
	grpc.ClientStream
}

func (x *streamGetUsersServiceGetUsersScoreByServerClient) Recv() (*StreamUserResponse, error) {
	m := new(StreamUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamGetUsersServiceClient) GetUserScoreByClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamGetUsersService_GetUserScoreByClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamGetUsersService_serviceDesc.Streams[1], "/proto.StreamGetUsersService/GetUserScoreByClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGetUsersServiceGetUserScoreByClientStreamClient{stream}
	return x, nil
}

type StreamGetUsersService_GetUserScoreByClientStreamClient interface {
	Send(*StreamUserRequest) error
	CloseAndRecv() (*StreamUserResponse, error)
	grpc.ClientStream
}

type streamGetUsersServiceGetUserScoreByClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamGetUsersServiceGetUserScoreByClientStreamClient) Send(m *StreamUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamGetUsersServiceGetUserScoreByClientStreamClient) CloseAndRecv() (*StreamUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamGetUsersServiceClient) GetUserScoreByTWF(ctx context.Context, opts ...grpc.CallOption) (StreamGetUsersService_GetUserScoreByTWFClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamGetUsersService_serviceDesc.Streams[2], "/proto.StreamGetUsersService/GetUserScoreByTWF", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGetUsersServiceGetUserScoreByTWFClient{stream}
	return x, nil
}

type StreamGetUsersService_GetUserScoreByTWFClient interface {
	Send(*StreamUserRequest) error
	Recv() (*StreamUserResponse, error)
	grpc.ClientStream
}

type streamGetUsersServiceGetUserScoreByTWFClient struct {
	grpc.ClientStream
}

func (x *streamGetUsersServiceGetUserScoreByTWFClient) Send(m *StreamUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamGetUsersServiceGetUserScoreByTWFClient) Recv() (*StreamUserResponse, error) {
	m := new(StreamUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamGetUsersServiceServer is the server API for StreamGetUsersService service.
type StreamGetUsersServiceServer interface {
	// 普通模式
	GetUserScore(context.Context, *StreamUserRequest) (*StreamUserResponse, error)
	// 返回值中使用 stream, 表示是服务端流模式
	GetUsersScoreByServer(*StreamUserRequest, StreamGetUsersService_GetUsersScoreByServerServer) error
	// 请求参数中使用 stream, 表示是客户端流模式
	GetUserScoreByClientStream(StreamGetUsersService_GetUserScoreByClientStreamServer) error
	// 请求参数和返回值中都使用 stream, 表示是双向流
	GetUserScoreByTWF(StreamGetUsersService_GetUserScoreByTWFServer) error
}

// UnimplementedStreamGetUsersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamGetUsersServiceServer struct {
}

func (*UnimplementedStreamGetUsersServiceServer) GetUserScore(context.Context, *StreamUserRequest) (*StreamUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserScore not implemented")
}
func (*UnimplementedStreamGetUsersServiceServer) GetUsersScoreByServer(*StreamUserRequest, StreamGetUsersService_GetUsersScoreByServerServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersScoreByServer not implemented")
}
func (*UnimplementedStreamGetUsersServiceServer) GetUserScoreByClientStream(StreamGetUsersService_GetUserScoreByClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserScoreByClientStream not implemented")
}
func (*UnimplementedStreamGetUsersServiceServer) GetUserScoreByTWF(StreamGetUsersService_GetUserScoreByTWFServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserScoreByTWF not implemented")
}

func RegisterStreamGetUsersServiceServer(s *grpc.Server, srv StreamGetUsersServiceServer) {
	s.RegisterService(&_StreamGetUsersService_serviceDesc, srv)
}

func _StreamGetUsersService_GetUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGetUsersServiceServer).GetUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StreamGetUsersService/GetUserScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGetUsersServiceServer).GetUserScore(ctx, req.(*StreamUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGetUsersService_GetUsersScoreByServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamGetUsersServiceServer).GetUsersScoreByServer(m, &streamGetUsersServiceGetUsersScoreByServerServer{stream})
}

type StreamGetUsersService_GetUsersScoreByServerServer interface {
	Send(*StreamUserResponse) error
	grpc.ServerStream
}

type streamGetUsersServiceGetUsersScoreByServerServer struct {
	grpc.ServerStream
}

func (x *streamGetUsersServiceGetUsersScoreByServerServer) Send(m *StreamUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamGetUsersService_GetUserScoreByClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamGetUsersServiceServer).GetUserScoreByClientStream(&streamGetUsersServiceGetUserScoreByClientStreamServer{stream})
}

type StreamGetUsersService_GetUserScoreByClientStreamServer interface {
	SendAndClose(*StreamUserResponse) error
	Recv() (*StreamUserRequest, error)
	grpc.ServerStream
}

type streamGetUsersServiceGetUserScoreByClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamGetUsersServiceGetUserScoreByClientStreamServer) SendAndClose(m *StreamUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamGetUsersServiceGetUserScoreByClientStreamServer) Recv() (*StreamUserRequest, error) {
	m := new(StreamUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamGetUsersService_GetUserScoreByTWF_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamGetUsersServiceServer).GetUserScoreByTWF(&streamGetUsersServiceGetUserScoreByTWFServer{stream})
}

type StreamGetUsersService_GetUserScoreByTWFServer interface {
	Send(*StreamUserResponse) error
	Recv() (*StreamUserRequest, error)
	grpc.ServerStream
}

type streamGetUsersServiceGetUserScoreByTWFServer struct {
	grpc.ServerStream
}

func (x *streamGetUsersServiceGetUserScoreByTWFServer) Send(m *StreamUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamGetUsersServiceGetUserScoreByTWFServer) Recv() (*StreamUserRequest, error) {
	m := new(StreamUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamGetUsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamGetUsersService",
	HandlerType: (*StreamGetUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserScore",
			Handler:    _StreamGetUsersService_GetUserScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsersScoreByServer",
			Handler:       _StreamGetUsersService_GetUsersScoreByServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserScoreByClientStream",
			Handler:       _StreamGetUsersService_GetUserScoreByClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserScoreByTWF",
			Handler:       _StreamGetUsersService_GetUserScoreByTWF_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
